mvvm + rac +HHrouter

vc跳转使用router  每个vc定义一个路由url地址
cell 与vc 的通信使用RACObserve 定义管道  cell只负责往管道里面发数据 vc接管道接收数据

NSMutableArray<ThreeModules*> *applicationList = [ThreeModules mj_objectArrayWithKeyValuesArray:p[@"data"]];
ThreeModules *modules = [ThreeModules mj_objectWithKeyValues:p[@"data"]];


================================
-(BOOL)enableScrollWhenPlaceHolderViewShowing{
return YES;
}

-(UIView *)makePlaceHolderView{
EmptyView *view = [EmptyView flagView];
view.topConst.constant = 30;
view.backImage.image = [UIImage imageNamed:@"defultPage_build"];
view.contents.text = @"更多产品功能研发中…";
return view;
}

================================

  NSArray *users = [NSArray yy_modelArrayWithClass:LoginModel.class json:@[@{}]];
------------------------------------
NSString * regex = @"^[a-zA-Z0-9\\u4E00-\\u9FA5]{3,18}$";
NSPredicate *pred = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex];
return [pred evaluateWithObject:self.nameTF.text];
------------------------------------
@weakify(self);
[[self.textField rac_textSignal] subscribeNext:^(NSString * _Nullable x) {
@strongify(self);
self.textField.text = @"Hello";
}];

①UITextField(实时监听输入框内容)
[[self.textField rac_textSignal] subscribeNext:^(NSString * _Nullable x) {
NSLog(@"%@", x);
}];

②UIButton(Button点击事件)
[[self.button rac_signalForControlEvents:(UIControlEventTouchUpInside)] subscribeNext:^(__kindof UIControl * _Nullable x) {
NSLog(@"%@",x);
}]

2. 通知
[[[NSNotificationCenter defaultCenter] rac_addObserverForName:UIApplicationDidBecomeActiveNotification object:nil] subscribeNext:^(NSNotification * _Nullable x) {
NSLog(@"%@",x);
}];


//kvo
[RACObserve(_redView, frame) subscribeNext:^(id  _Nullable x) {
NSLog(@"3 - %@",x);
}];

//手势
UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] init];
[[tap rac_gestureSignal] subscribeNext:^(id x) {
NSLog(@"tap");
}];
[self.view addGestureRecognizer:tap];

-------------------------------------------
信号订阅
RACReplaySubject *replaySubject = [RACReplaySubject subject];


[replaySubject subscribeNext:^(id x) {
NSString *signalStr = (NSString *)x;
NSLog(@"信号发送前订阅%@",signalStr);
}];


[replaySubject sendNext:@"replaySubject信号发送"];


----------------------------------------------------

RACSubject *subjectDefault = [RACSubject subject];
[subjectDefault subscribeNext:^(id x) {
NSString *paramString = (NSString *)x;
NSLog(@"信号发送前订阅%@",paramString);
}];
[subjectDefault sendNext:@"subject信号发送"];

[subjectDefault subscribeNext:^(id x) {
NSString *paramString = (NSString *)x;
NSLog(@"信号发送后订阅%@",paramString);
}];
--------------------------

RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
[subscriber sendNext:@1];
[subscriber sendNext:@2];
[subscriber sendCompleted];
return nil;
}];

[signal subscribeNext:^(id _Nullable x) {
NSLog(@"%@", x);
}];
-----------------------------------

-(void)initTabView{


ZDSKRow* model2 = [[ZDSKRow alloc] initWithCellIdentifier:@"WorkAddressCell" data: obj rowHeight:UITableViewAutomaticDimension];


UITableView *tableView = [[UITableView alloc] init];
tableView.separatorStyle = UITableViewCellSelectionStyleNone;
tableView.separatorColor = [UIColor clearColor];
tableView.delegate = self;
tableView.dataSource = self;
tableView.estimatedRowHeight = 44;
//tableView.sectionFooterHeight = CGFLOAT_MIN;
//tableView.tableFooterView = [[UIView alloc] init];

if (@available(iOS 11.0,*)) {
tableView.contentInsetAdjustmentBehavior=UIScrollViewContentInsetAdjustmentNever;
tableView.estimatedRowHeight=0;
tableView.estimatedSectionFooterHeight=0;
}else{
self.automaticallyAdjustsScrollViewInsets=NO;
}

[tableView registerNib:[UINib nibWithNibName:@"ZDIntroduceCell" bundle:nil] forCellReuseIdentifier:@"ZDIntroduceCell"];


[self.view addSubview:tableView];

[tableView mas_makeConstraints:^(MASConstraintMaker *make) {
make.left.equalTo(self.view).with.offset(0);
make.top.equalTo(self.view).with.offset(64);
make.right.equalTo(self.view).with.offset(0);
make.bottom.equalTo(self.view).with.offset(-60);
}];


- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
return 0;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
ZDSKRow *row = [dataSoucs objectAtIndex:indexPath.row];
return row.rowHeight;
}

#pragma mark - UITableViewDataSource

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
return dataSoucs.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath  {
// 这里可以通过判断cellIdentifier来区分处理各种不同的cell，cell所需的数据从row.data上获取

ZDSKRow *row = [dataSoucs objectAtIndex:indexPath.row];
if ([row.cellIdentifier isEqualToString:@"ZDIntroduceCell"]) {
ZDIntroduceCell *cell = [tableView dequeueReusableCellWithIdentifier:row.cellIdentifier];

cell.selectionStyle = UITableViewCellSelectionStyleNone;
[cell setData:row.data];
return cell;
} else if ([row.cellIdentifier isEqualToString:@"ZDPositionCell"]) {
ZDPositionCell *cell = [tableView dequeueReusableCellWithIdentifier:row.cellIdentifier ];

cell.selectionStyle = UITableViewCellSelectionStyleNone;
cell.supView0 = self.view;
[cell setData:row.data];
return cell;
} else if ([row.cellIdentifier isEqualToString:@"WorkAddressCell"]) {
WorkAddressCell *cell = [tableView dequeueReusableCellWithIdentifier:row.cellIdentifier ];

cell.selectionStyle = UITableViewCellSelectionStyleNone;
[cell setData:row.data];
return cell;
}else if ([row.cellIdentifier isEqualToString:@"InterestTitleCell"]) {
InterestTitleCell *cell = [tableView dequeueReusableCellWithIdentifier:row.cellIdentifier ];

cell.selectionStyle = UITableViewCellSelectionStyleNone;
return cell;
}else if ([row.cellIdentifier isEqualToString:@"AdvertisingCell"]) {
AdvertisingCell *cell = [tableView dequeueReusableCellWithIdentifier:row.cellIdentifier ];

cell.selectionStyle = UITableViewCellSelectionStyleNone;
[cell setData:row.data];
return cell;
}else if ([row.cellIdentifier isEqualToString:@"RecruitmentList"]) {
RecruitmentList *cell = [tableView dequeueReusableCellWithIdentifier:row.cellIdentifier ];

cell.selectionStyle = UITableViewCellSelectionStyleNone;
[cell setData:row.data];
return cell;
}
return nil;
}

----------------------------------------------
- (void)setTextFieldInputAccessoryView{
UIToolbar * topView = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, WIDTH, 30)];
[topView setBarStyle:UIBarStyleDefault];
UIBarButtonItem * spaceBtn = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
UIButton *doneBtn = [UIButton buttonWithType:UIButtonTypeSystem];
[doneBtn setTitle:@"完成" forState:UIControlStateNormal];
doneBtn.frame = CGRectMake(2, 5, 40, 25);
[doneBtn addTarget:self action:@selector(dealKeyboardHide) forControlEvents:UIControlEventTouchUpInside];
UIBarButtonItem *doneBtnItem = [[UIBarButtonItem alloc]initWithCustomView:doneBtn];
NSArray * buttonsArray = [NSArray arrayWithObjects:spaceBtn,doneBtnItem,nil];
[topView setItems:buttonsArray];
[self setInputAccessoryView:topView];
[self setAutocorrectionType:UITextAutocorrectionTypeNo];
[self setAutocapitalizationType:UITextAutocapitalizationTypeNone];
}

- (void)dealKeyboardHide {
[[[UIApplication sharedApplication] keyWindow] endEditing:YES];
}
