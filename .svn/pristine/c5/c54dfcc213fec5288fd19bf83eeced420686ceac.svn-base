//
//  DNBrowserVC.m
//  ScmProject
//
//  Created by leosun on 2019/9/23.
//  Copyright © 2019 session. All rights reserved.
//

#import "DNBrowserVC.h"
#import "DNBrowserHotTableViewCell.h"
#import "DNSBrowserModel.h"
#import "DNBrowserListVC.h"
#import "DNSPublishHomeVC.h"
#import "DSPublishVC.h"
#import "DNSMyPublishParentVC.h"
#import "DNBrowserDetailVC.h"
#import "BrowserCollectVC.h"
#import "UpdateNameVC.h"
#import "UUMarqueeView.h"
#import "NewsWebViewController.h"
#import "EvidenceHomeVC.h"
#import "MyEvidenceVC.h"
#import "ScanViewController.h"
#import "EvidenceDetailVC.h"
#import "AdvanceAuthenVC.h"
#import "SetTradePasswordVC.h"
#import "AuthenVC.h"
#import "MyWebsiteHomeVC.h"

@interface DNBrowserVC ()<UITableViewDataSource,UITableViewDelegate,UUMarqueeViewDelegate>{
    int page;
}

@property(nonatomic,strong)NSMutableArray *datas;
@property(nonatomic,strong)NSMutableArray *epidDatas;
@property(nonatomic,strong)DNSBrowserModel *model;
@property(nonatomic,weak)UIImageView *image;
@property(nonatomic,weak)UIButton *button;
@property (nonatomic, strong) UUMarqueeView *upwardMultiMarqueeView;

@end

@implementation DNBrowserVC

- (void)viewDidLoad {
    [super viewDidLoad];
    [self prepareUi];
    [self addRefresh];
    [self.tableview.mj_header beginRefreshing];
}

- (void)viewWillLayoutSubviews {
    CGRect statusBarRect = [[UIApplication sharedApplication] statusBarFrame];
    if (statusBarRect.size.height == 40) {
        self.navigationController.view.frame = CGRectMake(0, 0, ksrcwidth, ksrcheight);
    }
}

-(void)addRefresh{
    self.view.height = ksrcheight - tabbarHeight;
    WeakSelf(self);
    self.tableview.mj_header = [PersonGifHeader headerWithRefreshingBlock:^{
        [weakself getData:YES];
    }];
    self.tableview.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingBlock:^{
        [weakself getData:NO];
    }];
    
    [self getEpidData];

    UIImage *image = [[GDLocalizableController userLanguage] isEqualToString:ENGLISH]?[UIImage imageNamed:@"browser_icon_eng"]:[UIImage imageNamed:@"browser_icon"];
    self.searchImage.image = image;
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] init];
    [[tap rac_gestureSignal] subscribeNext:^(id x) {
        [weakself searchClick];
    }];
    [self.searchView addGestureRecognizer:tap];
}

-(void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    [UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleDefault;
    self.buttonFrame = self.buttonImageV.frame;
}

-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    UIImageView *image = [[UIImageView alloc] initWithFrame:CGRectMake(ksrcwidth - 80 + 18, ksrcheight - 80 - tabbarHeight + 15.5, 24, 24)];
    image.image = [UIImage imageNamed:@"icon_browser_tyin"];
    image.userInteractionEnabled = YES;
    [self.tabBarController.view addSubview:_image = image];
    
    UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(ksrcwidth - 80, ksrcheight - tabbarHeight - 80, 60, 60)];
    [button addTarget:self action:@selector(publishClick:) forControlEvents:UIControlEventTouchUpInside];
    [self.tabBarController.view addSubview:_button = button];
}

-(void)viewDidDisappear:(BOOL)animated{
    [super viewDidDisappear:animated];
    [self.image removeFromSuperview];
    [self setImage:nil];
    
    [self.button removeFromSuperview];
    [self setButton:nil];
}

-(void)prepareUi{
    self.view.backgroundColor = [UIColor colorWithRGBHex:@"#f7f7f9"];
    [self.tableview registerNib:[UINib nibWithNibName:@"DNBrowserHotTableViewCell" bundle:nil] forCellReuseIdentifier:@"DNBrowserHotTableViewCell"];
    
    self.inputBgview.layer.borderColor = [UIColor colorWithRGBHex:@"#55555D"].CGColor;
    self.inputBgview.layer.borderWidth = 0.5f;
    self.inputBgview.layer.cornerRadius = 4.f;
    self.inputBgview.layer.masksToBounds = YES;
    
    self.bottomConst.constant += tabbarHeight;
    [self addEpideView];
}

- (void)searchClick{
    if ([[self removeSpaceAndNewline:self.searchText.text] isEqualToString:@""]) {
        [self showMsg:NSLocalizedString(@"请输入你要查询的内容", nil) location:centre];
        return;
    }
    [self.view endEditing:YES];
    DNBrowserListVC *browserList = [[DNBrowserListVC alloc] init];
    browserList.searchStr = [self removeSpaceAndNewline:self.searchText.text];
    browserList.searchSubject = [RACSubject subject];
    WeakSelf(self);
    [browserList.searchSubject subscribeNext:^(NSString *searchStr) {
        weakself.searchText.text = searchStr;
    }];
    [self.navigationController pushViewController:browserList animated:YES];
}

- (IBAction)saoClick:(id)sender {
    ScanViewController *scan = [[ScanViewController alloc] init];
    scan.modalPresentationStyle = UIModalPresentationFullScreen;
    scan.type = 1;
    WeakSelf(self);
    scan.scanBlock = ^(NSString *scanData) {
//        https://jydns.top/download/app.html?deposit_certificate_id&&%ld
        if (![scanData containsString:@"deposit_certificate_id"]) {
            [weakself showMsg:NSLocalizedString(@"非证书二维码，无法查询", nil) location:centre];
            return ;
        }
        NSArray *scanArr = [scanData componentsSeparatedByString:@"deposit_certificate_id="];
        if ([scanArr[1] isEqualToString:@""]) {
            [weakself showMsg:NSLocalizedString(@"非证书二维码，无法查询", nil) location:centre];
            return ;
        }
        NSString *idStr = [DES3EncryptUtil base64Decode:scanArr[1]];
        EvidenceDetailVC *detail = [[EvidenceDetailVC alloc] init];
        detail.deposit_certificate_id = [idStr longLongValue];
        [weakself.navigationController pushViewController:detail animated:YES];
    };
    [self presentViewController:scan animated:YES completion:^{
    }];
}

- (void)publishClick:(id)sender {
    DNSPublishHomeVC *homeVC = [[DNSPublishHomeVC alloc] init];
    homeVC.modalPresentationStyle = UIModalPresentationFullScreen;
    homeVC.publishSubject = [RACSubject subject];
    WeakSelf(self);
    [homeVC.publishSubject subscribeNext:^(id x) {
        DSPublishVC *publish = [[DSPublishVC alloc] init];
        [weakself.navigationController pushViewController:publish animated:YES];
    }];
    homeVC.myPublishSubject = [RACSubject subject];
    [homeVC.myPublishSubject subscribeNext:^(id x) {
        DNSMyPublishParentVC *myPublish = [[DNSMyPublishParentVC alloc] init];
        [weakself.navigationController pushViewController:myPublish animated:YES];
    }];
    homeVC.settingSubject = [RACSubject subject];
    [homeVC.settingSubject subscribeNext:^(NSString *index) {
        UpdateNameVC *update = [[UpdateNameVC alloc] init];
        [weakself.navigationController pushViewController:update animated:YES];
    }];
    homeVC.evidenceSubject = [RACSubject subject];
    [homeVC.evidenceSubject subscribeNext:^(id x) {
        [weakself judgeUserInfo];
        EvidenceHomeVC *evidence = [[EvidenceHomeVC alloc] init];
        [weakself.navigationController pushViewController:evidence animated:YES];
    }];
    homeVC.myEvidenceSubject = [RACSubject subject];
    [homeVC.myEvidenceSubject subscribeNext:^(id x) {
        MyEvidenceVC *evidence = [[MyEvidenceVC alloc] init];
        [weakself.navigationController pushViewController:evidence animated:YES];
    }];
    homeVC.collectSubject = [RACSubject subject];
    [homeVC.collectSubject subscribeNext:^(NSString *index) {
        BrowserCollectVC *collect = [[BrowserCollectVC alloc] init];
        collect.type = [index integerValue];
        [weakself.navigationController pushViewController:collect animated:YES];
    }];
    homeVC.selectSubject = [RACSubject subject];
    [homeVC.selectSubject subscribeNext:^(NSDictionary *dict) {
        DNBrowserDetailVC *detail = [[DNBrowserDetailVC alloc] init];
        long articleid = [dict[@"id"] longLongValue];
        detail.articleid = articleid;
        detail.articleTitle = AssectString(dict[@"title"]);
        [weakself.navigationController pushViewController:detail animated:YES];
    }];
    homeVC.myWebsiteSubject = [RACSubject subject];
    [homeVC.myWebsiteSubject subscribeNext:^(id x) {
        MyWebsiteHomeVC *website = [[MyWebsiteHomeVC alloc] init];
        [weakself.navigationController pushViewController:website animated:YES];
    }];
    homeVC.image = [self doScreenShot];
    homeVC.image1 = [self doScreenShot1];
    [self presentViewController:homeVC animated:YES completion:nil];
}

//实名认证判断
-(void)judgeUserInfo{
    NSDictionary *userdict = [Manager takeoutUserTokenkey:JYLoginuser];
    NSString *payPsw = AssectString(userdict[JYPayPassword]);
    NSString *authen = AssectString(userdict[JYAuthentication]);
    if ([payPsw isEqualToString:@"0"] || ![authen isEqualToString:@"1"]) {
        AdvanceAuthenVC *advance = [[AdvanceAuthenVC alloc] init];
        advance.modalPresentationStyle = UIModalPresentationOverCurrentContext;
        WeakSelf(self);
        advance.pswSubject = [RACSubject subject];
        [advance.pswSubject subscribeNext:^(id x) {
            SetTradePasswordVC *setPsw = [[SetTradePasswordVC alloc] init];
            [weakself.navigationController pushViewController:setPsw animated:YES];
        }];
        advance.authenSubject = [RACSubject subject];
        [advance.authenSubject subscribeNext:^(NSString *authen) {
            //0未，1是，2审核中，3失败
            if ([authen isEqualToString:@"0"] || [authen isEqualToString:@"3"]) {
                AuthenVC *authen = [[AuthenVC alloc] init];
                [weakself.navigationController pushViewController:authen animated:YES];
            }else{
                [weakself showMsg:NSLocalizedString(@"正在审核中", nil) location:centre];
            }
        }];
        [self.navigationController presentViewController:advance animated:NO completion:^{
            
        }];
        return;
    }
}

-(void)getData:(BOOL)ifFresh{
    ifFresh?(page = 1):page++;
    NSDictionary *dict = @{@"page":[NSString stringWithFormat:@"%d",page]};
    WeakSelf(self);
    [WebServices getFormReqUrl:BrowserRecommendHot param:dict loadingTime:12.f callbackBlock:^(NSDictionary *json, NSInteger startCode, NSString *error) {
        if(json != nil){
            if ([AssectString(json[@"code"]) isEqualToString:@"1"]) {
                !ifFresh?:[weakself.datas removeAllObjects];
                NSMutableArray<DNSBrowserModel*> *applicationList = [DNSBrowserModel mj_objectArrayWithKeyValuesArray:json[@"data"][@"hot_article"]];
                [weakself.datas addObjectsFromArray:applicationList];
            }
        }
        [weakself.tableview.mj_header endRefreshing];
        [weakself.tableview.mj_footer endRefreshing];
        [weakself.tableview reloadData];
    }];
}

-(void)getEpidData{
    WeakSelf(self);
    [WebServices getFormReqUrl:EpidemicList param:@{} loadingTime:12.f callbackBlock:^(NSDictionary *json, NSInteger startCode, NSString *error) {
        if(json != nil){
            if ([AssectString(json[@"code"]) isEqualToString:@"1"]) {
                [weakself.epidDatas removeAllObjects];
                [weakself.epidDatas addObjectsFromArray:json[@"data"][@"epidemic_chains"]];
                [weakself.upwardMultiMarqueeView reloadData];
            }
        }
    }];
}

-(void)addEpideView{
    self.upwardMultiMarqueeView = [[UUMarqueeView alloc] initWithFrame:CGRectMake(0, 0, 332.5 - 92, 20)];
    _upwardMultiMarqueeView.delegate = self;
    _upwardMultiMarqueeView.timeIntervalPerScroll = 3.f;
    _upwardMultiMarqueeView.timeDurationPerScroll = 0.5f;
    _upwardMultiMarqueeView.touchEnabled = YES;
    [self.epidBgView addSubview:_upwardMultiMarqueeView];
}

#pragma -mark UITableViewDelegate
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.datas.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return UITableViewAutomaticDimension;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    DNBrowserHotTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"DNBrowserHotTableViewCell"];
    DNSBrowserModel *model = self.datas[indexPath.row];
    cell.model = model;
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    DNSBrowserModel *model = self.datas[indexPath.row];
    DNBrowserDetailVC *detail = [[DNBrowserDetailVC alloc] init];
    detail.articleid = model.browserid;
    detail.articleTitle = model.title;
    [self.navigationController pushViewController:detail animated:YES];
}

#pragma mark - UUMarqueeViewDelegate
- (NSUInteger)numberOfVisibleItemsForMarqueeView:(UUMarqueeView*)marqueeView {
    return 1;
}

- (NSUInteger)numberOfDataForMarqueeView:(UUMarqueeView*)marqueeView {
    return self.epidDatas.count ? self.epidDatas.count : 0;
}

- (void)createItemView:(UIView*)itemView forMarqueeView:(UUMarqueeView*)marqueeView {
    // for upwardMultiMarqueeView
    itemView.backgroundColor = [UIColor whiteColor];
    
    UIImageView *icon = [[UIImageView alloc] initWithFrame:CGRectMake(0, (12 - 3)/2, 3, 3)];
    icon.tag = 1003;
    icon.backgroundColor = [UIColor colorWithRGBHex:@"#18181A"];
    icon.layer.masksToBounds = YES;
    icon.layer.cornerRadius = 1.5;
    [itemView addSubview:icon];
    
    UILabel *content = [[UILabel alloc] initWithFrame:CGRectMake(CGRectGetMaxX(icon.frame) + 5, 0.0f, CGRectGetWidth(itemView.bounds) - (CGRectGetMaxX(icon.frame) + 5), CGRectGetHeight(itemView.bounds))];
    content.font = [UIFont systemFontOfSize:12];
    content.textColor = [UIColor colorWithRGBHex:@"#54545C"];
    content.tag = 1001;
    [itemView addSubview:content];
    
    icon.y = CGRectGetMidY(content.frame) - 1.5;
}

- (void)updateItemView:(UIView*)itemView atIndex:(NSUInteger)index forMarqueeView:(UUMarqueeView*)marqueeView {
    // for upwardMultiMarqueeView
    NSDictionary *dict = self.epidDatas[index];
    
    UILabel *content = [itemView viewWithTag:1001];
    content.text = AssectString(dict[@"title"]);
    
    UIImageView *icon = [itemView viewWithTag:1003];
    icon.backgroundColor = [UIColor colorWithRGBHex:@"#18181A"];
}

- (CGFloat)itemViewHeightAtIndex:(NSUInteger)index forMarqueeView:(UUMarqueeView*)marqueeView {
    // for upwardDynamicHeightMarqueeView
    return 12;
}

- (CGFloat)itemViewWidthAtIndex:(NSUInteger)index forMarqueeView:(UUMarqueeView*)marqueeView {
    // for leftwardMarqueeView
    return marqueeView.width;
}

- (void)didTouchItemViewAtIndex:(NSUInteger)index forMarqueeView:(UUMarqueeView*)marqueeView {
    NewsWebViewController* webViewObj =  [[NewsWebViewController alloc] init];
    webViewObj.loadUrl = @"https://jie1.top/api/epidemic-chain/index";
    webViewObj.fromEpid = 1;
    [self.navigationController pushViewController:webViewObj animated:YES];
}

- (UIImage *)doScreenShot{
    // 开启图片上下文
    UIGraphicsBeginImageContextWithOptions(self.view.bounds.size, NO, 0);
    // 获取当前上下文
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    // 截图:实际是把layer上面的东西绘制到上下文中
    [self.view.layer renderInContext:ctx];
    //iOS7+ 推荐使用的方法，代替上述方法
    // [self.view drawViewHierarchyInRect:self.view.frame afterScreenUpdates:YES];
    // 获取截图
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    // 关闭图片上下文
    UIGraphicsEndImageContext();
    //返回Image
    return image;
}

- (UIImage *)doScreenShot1{
    UITabBar *tabar = self.tabBarController.tabBar;
    // 开启图片上下文
   
    UIGraphicsBeginImageContextWithOptions(tabar.size, NO, 0);
    // 获取当前上下文
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    // 截图:实际是把layer上面的东西绘制到上下文中
    [tabar.layer renderInContext:ctx];
    //iOS7+ 推荐使用的方法，代替上述方法
    // [self.view drawViewHierarchyInRect:self.view.frame afterScreenUpdates:YES];
    // 获取截图
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    // 关闭图片上下文
    UIGraphicsEndImageContext();
    //返回Image
    return image;
}

#pragma -mark getter
-(NSMutableArray *)datas{
    if (!_datas) {
        _datas = [NSMutableArray array];
    }
    return _datas;
}

-(NSMutableArray *)epidDatas{
    if (!_epidDatas) {
        _epidDatas = [NSMutableArray array];
    }
    return _epidDatas;
}

-(CGFloat)calculateWidth:(NSString *)content{
    //计算文本文字size
    CGSize size = [content sizeWithAttributes:@{NSFontAttributeName: [UIFont systemFontOfSize:10 weight:(UIFontWeightSemibold)]}];
    //获取宽高
//    CGSize statuseStrSize = CGSizeMake(ceilf(size.width), ceilf(size.height));
    return size.width + 14;
}
@end
