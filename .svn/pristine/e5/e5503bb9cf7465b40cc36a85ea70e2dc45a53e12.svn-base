//
//  OCExampleViewController.m
//  JXPagerView
//
//  Created by jiaxin on 2018/8/27.
//  Copyright © 2018年 jiaxin. All rights reserved.
//

#import "DNSDetailVC.h"
#import "DNSCoinSelectVC.h"
#import "DNSBindAddressVC.h"
#import "DNSDetailSelectVC.h"
#import "DNSBindModel.h"
#import "DNSUnbindAddressVC.h"
#import "ChangeBindAddressVC.h"
#import "DNSBindFooter.h"

@interface DNSDetailVC ()

@property(nonatomic,strong)DNSBindFooter *footerview;
@end

@implementation DNSDetailVC

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setBanar:NSLocalizedString(@"域名详情", nil) hiddeBack:NO];
    [self.view addSubview:self.pagingView];
    [self.view addSubview:self.footerview];
    [self addRightBtn];
}

-(void)viewDidDisappear:(BOOL)animated{
    [super viewDidDisappear:animated];
    self.navigationController.interactivePopGestureRecognizer.enabled = YES;
}

-(void)addRightBtn{
    UIView *bar = [self gerNavBar];
    
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(ksrcwidth - 40,navBarHeight - 45, 30, 30)];
    [bar addSubview:view];
    
    UIButton *rightBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    rightBtn.frame = CGRectMake(0, 0, 30, 30);
    [rightBtn setImage:[UIImage imageNamed:@"icon_search_black"] forState:UIControlStateNormal];
    WeakSelf(self);
    [[rightBtn rac_signalForControlEvents:(UIControlEventTouchUpInside)] subscribeNext:^(id x) {
        DNSCoinSelectVC *coinSelect = [[DNSCoinSelectVC alloc] init];
        coinSelect.manageid = weakself.manageid;
        coinSelect.domain_name_id = [NSString stringWithFormat:@"%ld",weakself.detailHeader.model.detailid];
        [weakself.navigationController pushViewController:coinSelect animated:YES];
    }];
    [view addSubview:rightBtn];
}

-(void)goUnbindListClick{
    DNSDetailSelectVC *unbindSelectVc = [[DNSDetailSelectVC alloc] init];
    unbindSelectVc.manageid = self.manageid;
    unbindSelectVc.domain_name = self.detailHeader.model.domain_name;
    [self.navigationController pushViewController:unbindSelectVc animated:YES];
}

#pragma mark - JXPagingViewDelegate
/**
 自定义头部视图
 */
- (UIView *)tableHeaderViewInPagerView:(JXPagerView *)pagerView {
    return self.detailHeader;
}
/**
 自定义头部视图高
 
 @param pagerView pagerView
 @return 头部视图高
 */
- (NSUInteger)tableHeaderViewHeightInPagerView:(JXPagerView *)pagerView {
    return JXTableHeaderViewHeight;
}
/**
 菜单项View
 
 @param pagerView pagerView
 @return 菜单项View
 */
- (UIView *)viewForPinSectionHeaderInPagerView:(JXPagerView *)pagerView {
    return self.categoryView;
}
/**
 菜单项View高
 
 @param pagerView pagerView
 @return 菜单项View高
 */
- (NSUInteger)heightForPinSectionHeaderInPagerView:(JXPagerView *)pagerView {
    return JXheightForHeaderInSection;
}
/**
 上下滚动后调用
 */
- (void)mainTableViewDidScroll:(UIScrollView *)scrollView {
    //计算偏移量
}

- (NSInteger)numberOfListsInPagerView:(JXPagerView *)pagerView {
    return self.itemArr.count;
}

- (id<JXPagerViewListViewDelegate>)pagerView:(JXPagerView *)pagerView initListAtIndex:(NSInteger)index {
    DNSDetailChildView *childview = [[DNSDetailChildView alloc] init];
    childview.pageType = index == 0?DNSDetailChildViewTypeBind:DNSDetailChildViewTypeUnBind;
    [childview refreshData:self.manageid];
    WeakSelf(self);
    childview.subject = [RACSubject subject];
    [childview.subject subscribeNext:^(NSDictionary *dict) {
        if ([[dict objectForKey:@"type"] isEqualToString:@"0"]) {
            NSArray *array = dict[@"data"];
            weakself.footerview.unbindBtn.enabled = array.count >0;
            weakself.footerview.unbindBtn.backgroundColor = array.count>0?[UIColor colorWithRGBHex:@"#5151F0"]:[UIColor colorWithRGBHex:@"#9999A3"];
        }
        [weakself.detailHeader getData:weakself.manageid];
    }];
    childview.bindSubject = [RACSubject subject];
    [childview.bindSubject subscribeNext:^(DNSBindModel *model) {
        DNSBindAddressVC *bindVc = [[DNSBindAddressVC alloc] init];
        bindVc.domain_name_id = [NSString stringWithFormat:@"%ld",weakself.detailHeader.model.detailid];
        bindVc.model = model;
        [weakself.navigationController pushViewController:bindVc animated:YES];
    }];
    childview.unBindSubject = [RACSubject subject];
    [childview.unBindSubject subscribeNext:^(DNSBindModel *model) {
        DNSUnbindAddressVC *unbindVc = [[DNSUnbindAddressVC alloc] init];
        unbindVc.domain_name_id = [NSString stringWithFormat:@"%ld",weakself.detailHeader.model.detailid];
        unbindVc.model = model;
        [weakself.navigationController pushViewController:unbindVc animated:YES];
    }];
    childview.changeBindSubject = [RACSubject subject];
    [childview.changeBindSubject subscribeNext:^(DNSBindModel *model) {
        ChangeBindAddressVC *changeVc = [[ChangeBindAddressVC alloc] init];
        changeVc.domain_name_id = [NSString stringWithFormat:@"%ld",weakself.detailHeader.model.detailid];
        changeVc.model = model;
        [weakself.navigationController pushViewController:changeVc animated:YES];
    }];
    return childview;
}

-(void)categoryView:(JXCategoryBaseView *)categoryView didClickedItemContentScrollViewTransitionToIndex:(NSInteger)index{
    //请务必实现该方法
    //因为底层触发列表加载是在代理方法：`- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath`回调里面
    //所以，如果当前有5个item，当前在第1个，用于点击了第5个。categoryView默认是通过设置contentOffset.x滚动到指定的位置，这个时候有个问题，就会触发中间2、3、4的cellForItemAtIndexPath方法。
    //如此一来就丧失了延迟加载的功能
    //所以，如果你想规避这样的情况发生，那么务必按照这里的方法处理滚动。
    [self.pagingView.listContainerView.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:index inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:NO];
    
    //如果你想相邻的两个item切换时，通过有动画滚动实现。未相邻的两个item直接切换，可以用下面这段代码
    /*
     NSInteger diffIndex = labs(categoryView.selectedIndex - index);
     if (diffIndex > 1) {
     [self.pagerView.listContainerView.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:index inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:NO];
     }else {
     [self.pagerView.listContainerView.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:index inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:YES];
     }
     */
}

#pragma mark - JXPagerMainTableViewGestureDelegate
- (BOOL)mainTableViewGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
    //禁止categoryView左右滑动的时候，上下和左右都可以滚动
    if (otherGestureRecognizer == self.categoryView.collectionView.panGestureRecognizer) {
        return NO;
    }
    return [gestureRecognizer isKindOfClass:[UIPanGestureRecognizer class]] && [otherGestureRecognizer isKindOfClass:[UIPanGestureRecognizer class]];
}

#pragma mark - JXCategoryViewDelegate
/**
 选中菜单项后调用
 
 @param categoryView 菜单项View
 @param index 下表
 */
- (void)categoryView:(JXCategoryBaseView *)categoryView didSelectedItemAtIndex:(NSInteger)index {
    self.navigationController.interactivePopGestureRecognizer.enabled = (index == 0);
    self.footerview.hidden = index != 0;
}

/**
 滑动并切换内容视图后调用
 
 @param categoryView 菜单项View
 @param index 下表
 */
- (void)categoryView:(JXCategoryBaseView *)categoryView didScrollSelectedItemAtIndex:(NSInteger)index{
}

#pragma mark 懒加载
/**
 总视图
 */
-(JXPagerListRefreshView *)pagingView{
    if(!_pagingView){
        //
        _pagingView = [[JXPagerListRefreshView alloc] initWithDelegate:self];
        _pagingView.frame = CGRectMake(0, navBarHeight, ksrcwidth, ksrcheight - navBarHeight);
    }
    return _pagingView;
}

-(DNSBindFooter *)footerview{
    if(!_footerview){
        _footerview = [[DNSBindFooter alloc] initWithFrame:CGRectMake(0, ksrcheight - 82, ksrcwidth, 82)];
        [_footerview.unbindBtn addTarget:self action:@selector(goUnbindListClick) forControlEvents:UIControlEventTouchUpInside];
    }
    return _footerview;
}

/**
 自定义头部视图
 */
-(DNSDetailChildHeader *)detailHeader{
    if(!_detailHeader){
        _detailHeader = [[DNSDetailChildHeader alloc] initWithFrame:CGRectMake(0, 0, ksrcwidth, JXTableHeaderViewHeight)];
    }
    return _detailHeader;
}

/**
 菜单项视图View
 */
-(JXCategoryTitleView *)categoryView{
    if(!_categoryView){
        //
        _categoryView = [[JXCategoryTitleView alloc] initWithFrame:CGRectMake(0, 0, ksrcwidth, JXheightForHeaderInSection)];
        // dele
        _categoryView.delegate = self;
        // 设置菜单项标题数组
        _categoryView.titles = self.itemArr;
        // 背景色
        _categoryView.backgroundColor = [UIColor whiteColor];
        // 标题色、标题选中色、标题字体、标题选中字体
        _categoryView.titleColor = [UIColor colorWithRGBHex:@"#9999A3"];
        _categoryView.titleSelectedColor = [UIColor colorWithRGBHex:@"#18181A"];
        _categoryView.titleFont = [UIFont boldSystemFontOfSize:16];
        _categoryView.titleSelectedFont = [UIFont boldSystemFontOfSize:16];
        // 标题色是否渐变过渡
        _categoryView.titleColorGradientEnabled = YES;
        _categoryView.titleLabelZoomScale = 1.0f;
        
        // 下划线
        JXCategoryIndicatorLineView *lineView = [[JXCategoryIndicatorLineView alloc] init];
        // 下划线颜色
        lineView.indicatorLineViewColor = [UIColor colorWithRGBHex:@"#18181A"];
        // 下划线宽度
        lineView.indicatorLineWidth = 35;

        _categoryView.indicators = @[lineView];
        
        //增加下划线
        UIView *botLineview = [[UIView alloc] initWithFrame:CGRectMake(0, _categoryView.height - 1, ksrcwidth, 1)];
        botLineview.backgroundColor = [UIColor colorWithRGBHex:@"#E6E6E6"];
        botLineview.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        [_categoryView addSubview:botLineview];
        
        // 联动（categoryView和pagingView）
        _categoryView.contentScrollView = self.pagingView.listContainerView.collectionView;
        // 返回上一页侧滑手势（仅在index==0时有效）
        self.navigationController.interactivePopGestureRecognizer.enabled = (_categoryView.selectedIndex == 0);
    }
    
    return _categoryView;
}

/**
 菜单项标题数组
 */
-(NSArray *)itemArr{
    if(!_itemArr){
        _itemArr=@[NSLocalizedString(@"已绑定", nil),NSLocalizedString(@"未绑定", nil)];
    }
    return _itemArr;
}


@end


