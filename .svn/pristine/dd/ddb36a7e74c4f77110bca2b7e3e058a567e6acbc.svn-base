
//
//  SetPasswordVC.m
//  ScmProject
//
//  Created by leosun on 2019/7/24.
//  Copyright © 2019 session. All rights reserved.
//

#import "SetPasswordVC.h"
#import "SetPasswordDoneVC.h"

@interface SetPasswordVC ()

@end

@implementation SetPasswordVC

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setBanar:NSLocalizedString(@"设置登录密码", nil) hiddeBack:NO];
    [self prepareUi];
    [self addRightBtn];
}

-(void)prepareUi{
    self.topConst.constant += navBarHeight;
    
    WeakSelf(self);
    [[self.codeBtn rac_signalForControlEvents:(UIControlEventTouchUpInside)] subscribeNext:^(id x) {
        [weakself sendCode];
    }];
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] init];
    [[tap rac_gestureSignal] subscribeNext:^(id x) {
        XWCountryCodeController *countryCode = [[XWCountryCodeController alloc] init];
        countryCode.returnCountryCodeBlock = ^(NSString *countryName, NSString *code) {
            weakself.areaLabel.text = [NSString stringWithFormat:@"＋%@",[weakself removeSpaceAndNewline:code]];
        };
        [weakself.navigationController pushViewController:countryCode animated:YES];
    }];
    [self.areaView addGestureRecognizer:tap];
}

-(void)addRightBtn{
    UIView *bar = [self gerNavBar];
    
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(ksrcwidth - 65,navBarHeight - 35, 60, 20)];
    [bar addSubview:view];
    
    UIButton *rightBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    rightBtn.frame = CGRectMake(0, 0, 60, 20);
    [rightBtn setTitle:NSLocalizedString(@"下一步", nil) forState:UIControlStateNormal];
    [rightBtn setTitleColor:[UIColor colorWithRGBHex:@"#5151F0"] forState:UIControlStateNormal];
    rightBtn.titleLabel.font = [UIFont boldSystemFontOfSize:14.f];
    rightBtn.titleLabel.textAlignment = NSTextAlignmentRight;
    WeakSelf(self);
    [[rightBtn rac_signalForControlEvents:(UIControlEventTouchUpInside)] subscribeNext:^(id x) {
        [weakself checkCode];
    }];
    [view addSubview:rightBtn];
}

-(void)sendCode{
    NSString *phone = [self removeSpaceAndNewline:self.phoneText.text];
    if ([phone isEqualToString:@""]) {
        [self showMsg:NSLocalizedString(@"请输入手机号", nil) location:centre];
        return;
    }
    NSString *area = @"";
    if ([self.areaLabel.text containsString:@"＋"]) {
        area = [self.areaLabel.text stringByReplacingOccurrencesOfString:@"＋" withString:@""];
    }else{
        area = self.areaLabel.text;
    }
    
    NSDictionary *dict = @{@"phone":phone,@"area":AssectString(area)};
    [self showLoading:NSLocalizedString(@"加载中..", nil) allowsOpOperation:NO];
    WeakSelf(self);
    [WebServices  postFormReqUrl:forgetVerifyCode param:dict loadingTime:12 callbackBlock:^(NSDictionary *json, NSInteger startCode, NSString *error) {
        [weakself dismissLoading];
        if(json != nil){
            if ([AssectString(json[@"code"]) isEqualToString:@"1"]) {
                [weakself countDown];
            }else{
                [weakself showMsg:json[@"msg"] location:centre];
            }
        }else{
            [weakself showMsg:NSLocalizedString(@"网络异常，请稍后重试", nil) location:centre];
        }
    }];
}

-(void)checkCode{
    NSString *phone = [self removeSpaceAndNewline:self.phoneText.text];
    if ([phone isEqualToString:@""]) {
        [self showMsg:NSLocalizedString(@"请输入手机号", nil) location:centre];
        return;
    }
    
    NSString *code = [self removeSpaceAndNewline:self.codeText.text];
    if ([code isEqualToString:@""]) {
        [self showMsg:NSLocalizedString(@"请输入验证码", nil) location:centre];
        return;
    }
    
    NSDictionary *dict = @{@"phone":phone,@"code":code};
    [self showLoading:NSLocalizedString(@"加载中..", nil) allowsOpOperation:NO];
    WeakSelf(self);
    [WebServices  postFormReqUrl:forgetNextStep param:dict loadingTime:12 callbackBlock:^(NSDictionary *json, NSInteger startCode, NSString *error) {
        [weakself dismissLoading];
        if(json != nil){
            if ([AssectString(json[@"code"]) isEqualToString:@"1"]) {
                SetPasswordDoneVC *setPsw = [[SetPasswordDoneVC alloc] init];
                setPsw.phone = phone;
                [weakself.navigationController pushViewController:setPsw animated:YES];
            }else{
                [weakself showMsg:json[@"msg"] location:centre];
            }
        }else{
            [weakself showMsg:NSLocalizedString(@"网络异常，请稍后重试", nil) location:centre];
        }
    }];
}

#pragma -mark 发送验证码
-(void)countDown{
    __block int timeout=60;//倒计时时间
    WeakSelf(self);
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
    dispatch_source_set_event_handler(_timer, ^{
        if(timeout<=0)
        { //倒计时结束，关闭
            dispatch_source_cancel(_timer);
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                //设置界面的按钮显示 根据自己需求设置
                [weakself.codeBtn setTitle:NSLocalizedString(@"重发验证码", nil) forState:UIControlStateNormal];
                [weakself.codeBtn setTitleColor:[UIColor colorWithRGBHex:@"#5151F0"] forState:UIControlStateNormal];
                weakself.codeBtn.enabled = YES;
            });
        }else{
            int seconds = timeout % 100;
            NSString *strTime = [NSString stringWithFormat:@"%.2d", seconds];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                //NSLog(@"____%@",strTime);
                [UIView beginAnimations:nil context:nil];
                [UIView setAnimationDuration:1];
                [weakself.codeBtn setTitle:[NSString stringWithFormat:@"%@s",strTime] forState:UIControlStateNormal];
                [weakself.codeBtn setTitleColor:[UIColor colorWithRGBHex:@"#AAAAB5"] forState:UIControlStateNormal];
                [UIView commitAnimations];
                weakself.codeBtn.enabled = NO;
            });
            timeout--;
        }
    });
    dispatch_resume(_timer);
}

@end
